package com.mtit.hospital;

import java.util.ArrayList;
import java.util.PrimitiveIterator.OfDouble;
import java.util.Scanner;

import com.mtit.account.MockAccountController;
import com.mtit.account.Account;
import com.mtit.account.MedicalHistory;

public class HospitalImpl implements Hospital {

	private ArrayList<Doctor> doctors = new ArrayList<Doctor>();
	private int numberOfRooms;
	private ArrayList<Room> assignRooms = new ArrayList<Room>();
	private double hospitalCharge;
	private int patientToken;
	private Doctor doctor;
	private Account account;
	private MedicalHistory medicalHistory;
	
	@Override
	public ArrayList<Doctor> getDoctorList() {
		return doctors;
	}

	@Override
	public void addDoctor(Doctor doctor) {
		doctors.add(doctor);
	}

	@Override
	public void setNumberOfRooms(int numberOfRooms) {
		this.numberOfRooms = numberOfRooms;
	}

	@Override
	public void assignRooms(Room room) {
		assignRooms.add(room);
	}

	@Override
	public ArrayList<Room> getAssignRooms() {
		return assignRooms;
	}

	@Override
	public void setHospitalCharge(double charge) {
		this.hospitalCharge = charge;
	}

	@Override
	public double getHospitalCharge() {
		return hospitalCharge;
	}

	@Override
	public void addAponitement() {
		Scanner sc = new Scanner(System.in);
		System.out.println("==========================\nWELCOME TO HOSPITAL PORTAL\n==========================");
		
		System.out.print("Enter username : ");
		String userName = sc.nextLine();
		
		System.out.print("Enter password : ");
		String password = sc.nextLine();
		
		MockAccountController mockAccountController = new MockAccountController();
		Account account = mockAccountController.checkAuthorization(userName, password);
		
		while(account == null) {
			System.out.println("invalid credentials. Please try again!");
			
			System.out.print("Enter username : ");
			userName = sc.nextLine();
			
			System.out.print("Enter password : ");
			password = sc.nextLine();
			
			account = mockAccountController.checkAuthorization(userName, password);
		}
		
		setAccount(account);
		
		System.out.println("Select id to make an appoinment\n\n");
		
		for(Doctor doctor : getDoctorList()) {
			System.out.println("Doctor name : " + doctor.getName() 
				+ "||  Specialization : " + doctor.getSpecialization()
				+ " || Available hour : " + doctor.getAvaialableHour()
				+ " || ID : " + doctor.getId());
		}
		
		int id = 0;
		System.out.print("cmd>>");
		id = sc.nextInt();
		Doctor doctor = getDoctorById(id);
		
		while(doctor == null) {
			System.out.println("**INVALID COMMAND**");
			System.out.print("cmd>>");
			id = sc.nextInt();
			doctor = getDoctorById(id);
			System.out.println(doctor.getName());
		}
		
		System.out.println("");
		int token = doctor.getToken();
		
		while(token == -1) {
			System.out.println("Sorry all free slots for today are filled!");
			System.out.println("Try again!");
			System.out.print("cmd>>");
			id = sc.nextInt();
			doctor = getDoctorById(id);
			token = doctor.getToken();
		}
		
		if(token != -1) {
			
			if(doctor.getNumberOfPatientPerDay() != doctor.getToken()) {
				doctor.incrementToken();				
			}
			
			MedicalHistory medicalHistory = new MedicalHistory();
			medicalHistory.setAccountId(getAccount().getAccountId());
			medicalHistory.setAppointmentNumber(token);
			medicalHistory.setAppointmentTime(doctor.getAvaialableHour());
			medicalHistory.setChanneledDoctorName(doctor.getName());
			medicalHistory.setRoomNumber(doctor.getRoom().getRoomNumber());
			medicalHistory.setPayment(getHospitalCharge() + doctor.getChargePerPatient());
			
			mockAccountController.addMedicalHistory(medicalHistory);
			
			setToken(token);
			setDoctor(doctor);
			System.out.println("Appointment Details!");
			System.out.println("Doctor Name : " + doctor.getName()
					+"\nAppointment number is : " + token 
					+ "\nAppointment time : " + doctor.getAvaialableHour()
					+ "\nRoom number : " + doctor.getRoom().getRoomNumber()
					+ "\nPayment : Rs."+ (getHospitalCharge() + doctor.getChargePerPatient()));
		}
		
		System.out.println("");
	}
	
	public void process(Doctor doctor, int token) {
		doctor.process(token);
	}
	
	public Doctor getDoctorById(int id) {
		for(Doctor doctor : getDoctorList()) {
			if(doctor.getId() == id) {
				return doctor;
			}
		}
		
		return null;
	}

	@Override
	public int getTocken() {
		return patientToken;
	}

	@Override
	public void setToken(int patientToken) {
		this.patientToken = patientToken;
	}

	@Override
	public void setDoctor(Doctor doctor) {
		this.doctor = doctor;
	}

	@Override
	public Doctor getDoctor() {
		return this.doctor;
	}

	@Override
	public void setAccount(Account account) {
		// TODO Auto-generated method stub
		this.account = account;
	}

	@Override
	public String getAccountId() {
		return account.getAccountId();
	}

	@Override
	public Account getAccount() {
		return account;
	}

	@Override
	public void setMedicalHistory(MedicalHistory medicalHistory) {
		this.medicalHistory = medicalHistory;
	}

	@Override
	public MedicalHistory getMedicalHistory() {
		return medicalHistory;
	}
	
}
